/*
 * Auth Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Bayer.Pegasus.Entities.Auth
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ForgotMyPasswordModel :  IEquatable<ForgotMyPasswordModel>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="ForgotMyPasswordModel" /> class.
        /// </summary>
        /// <param name="AppId">AppId (required).</param>
        /// <param name="Login">Login (required).</param>
        /// <param name="Ip">Ip (required).</param>
        /// <param name="CultureName">CultureName.</param>
        public ForgotMyPasswordModel(string AppId = default(string), string Login = default(string), string Ip = default(string), string CultureName = default(string))
        {
            // to ensure "AppId" is required (not null)
            if (AppId == null)
            {
                throw new InvalidDataException("AppId is a required property for ForgotMyPasswordModel and cannot be null");
            }
            else
            {
                this.AppId = AppId;
            }
            // to ensure "Login" is required (not null)
            if (Login == null)
            {
                throw new InvalidDataException("Login is a required property for ForgotMyPasswordModel and cannot be null");
            }
            else
            {
                this.Login = Login;
            }
            // to ensure "Ip" is required (not null)
            if (Ip == null)
            {
                throw new InvalidDataException("Ip is a required property for ForgotMyPasswordModel and cannot be null");
            }
            else
            {
                this.Ip = Ip;
            }
            this.CultureName = CultureName;
            
        }

        /// <summary>
        /// Gets or Sets AppId
        /// </summary>
        [DataMember(Name="appId")]
        public string AppId { get; set; }
        /// <summary>
        /// Gets or Sets Login
        /// </summary>
        [DataMember(Name="login")]
        public string Login { get; set; }
        /// <summary>
        /// Gets or Sets Ip
        /// </summary>
        [DataMember(Name="ip")]
        public string Ip { get; set; }
        /// <summary>
        /// Gets or Sets CultureName
        /// </summary>
        [DataMember(Name="cultureName")]
        public string CultureName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ForgotMyPasswordModel {\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  CultureName: ").Append(CultureName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((ForgotMyPasswordModel)obj);
        }

        /// <summary>
        /// Returns true if ForgotMyPasswordModel instances are equal
        /// </summary>
        /// <param name="other">Instance of ForgotMyPasswordModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ForgotMyPasswordModel other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.AppId == other.AppId ||
                    this.AppId != null &&
                    this.AppId.Equals(other.AppId)
                ) && 
                (
                    this.Login == other.Login ||
                    this.Login != null &&
                    this.Login.Equals(other.Login)
                ) && 
                (
                    this.Ip == other.Ip ||
                    this.Ip != null &&
                    this.Ip.Equals(other.Ip)
                ) && 
                (
                    this.CultureName == other.CultureName ||
                    this.CultureName != null &&
                    this.CultureName.Equals(other.CultureName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.AppId != null)
                    hash = hash * 59 + this.AppId.GetHashCode();
                    if (this.Login != null)
                    hash = hash * 59 + this.Login.GetHashCode();
                    if (this.Ip != null)
                    hash = hash * 59 + this.Ip.GetHashCode();
                    if (this.CultureName != null)
                    hash = hash * 59 + this.CultureName.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(ForgotMyPasswordModel left, ForgotMyPasswordModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ForgotMyPasswordModel left, ForgotMyPasswordModel right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
