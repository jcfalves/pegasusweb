//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EmailService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://br.bayer.bbs.util/webservices/", ConfigurationName="EmailService.emailSoap")]
    public interface emailSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://br.bayer.bbs.util/webservices/sendMail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> sendMailAsync(string mailTo, string subject, string body, bool htmlMail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://br.bayer.bbs.util/webservices/sendMailCCorBCC", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> sendMailCCorBCCAsync(string mailTo, string mailCC, string mailBCC, string subject, string body, bool htmlMail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://br.bayer.bbs.util/webservices/sendMailWithPersonalFrom", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> sendMailWithPersonalFromAsync(string personalMailFrom, string mailTo, string mailCC, string mailBCC, string subject, string body, bool htmlMail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://br.bayer.bbs.util/webservices/sendMailCCorBCCWithFromName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> sendMailCCorBCCWithFromNameAsync(string FromName, string mailTo, string mailCC, string mailBCC, string subject, string body, bool htmlMail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://br.bayer.bbs.util/webservices/sendMailCCorBCCWithFromNameEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> sendMailCCorBCCWithFromNameEmailAsync(string FromName, string FromEmail, string mailTo, string mailCC, string mailBCC, string subject, string body, bool htmlMail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://br.bayer.bbs.util/webservices/sendMailAttachmentCollection", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        System.Threading.Tasks.Task<string> sendMailAttachmentCollectionAsync(string mailTo, string subject, string body, object[] attachList, object[] attachListType, bool htmlMail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://br.bayer.bbs.util/webservices/sendMailAttachmentCollectionWithFromName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        System.Threading.Tasks.Task<string> sendMailAttachmentCollectionWithFromNameAsync(string mailTo, string FromName, string subject, string body, object[] attachList, object[] attachListType, bool htmlMail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://br.bayer.bbs.util/webservices/sendMailAttachmentCollectionBase64", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        System.Threading.Tasks.Task<string> sendMailAttachmentCollectionBase64Async(string mailTo, string subject, string body, object[] attachList, object[] attachListType, bool htmlMail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://br.bayer.bbs.util/webservices/sendMailAttachmentCollectionBase64WithFromNa" +
            "me", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        System.Threading.Tasks.Task<string> sendMailAttachmentCollectionBase64WithFromNameAsync(string mailTo, string FromName, string subject, string body, object[] attachList, object[] attachListType, bool htmlMail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://br.bayer.bbs.util/webservices/sendMailWithReplyTo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        System.Threading.Tasks.Task<string> sendMailWithReplyToAsync(string mailTo, string subject, string body, bool htmlMail, string replyTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://br.bayer.bbs.util/webservices/sendMailWithFromName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        System.Threading.Tasks.Task<string> sendMailWithFromNameAsync(string mailTo, string subject, string body, bool htmlMail, string FromName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://br.bayer.bbs.util/webservices/sendMailWithFromNameAndReplyTo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        System.Threading.Tasks.Task<string> sendMailWithFromNameAndReplyToAsync(string mailTo, string subject, string body, bool htmlMail, string FromName, string replyTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://br.bayer.bbs.util/webservices/sendMailBlock", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        System.Threading.Tasks.Task<string> sendMailBlockAsync(string mailTo, string subject, string body, bool htmlMail, long numberOfMails, long numberOfThisMail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://br.bayer.bbs.util/webservices/sendMailWithFromNameEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        System.Threading.Tasks.Task<string> sendMailWithFromNameEmailAsync(string mailTo, string subject, string body, bool htmlMail, string FromName, string FromMail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://br.bayer.bbs.util/webservices/sendMailAttachmentCollectionWithFromNameEmai" +
            "l", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        System.Threading.Tasks.Task<string> sendMailAttachmentCollectionWithFromNameEmailAsync(string mailTo, string FromName, string FromMail, string subject, string body, object[] attachList, object[] attachListType, bool htmlMail);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public interface emailSoapChannel : EmailService.emailSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public partial class emailSoapClient : System.ServiceModel.ClientBase<EmailService.emailSoap>, EmailService.emailSoap
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public emailSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(emailSoapClient.GetBindingForEndpoint(endpointConfiguration), emailSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public emailSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(emailSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public emailSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(emailSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public emailSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> sendMailAsync(string mailTo, string subject, string body, bool htmlMail)
        {
            return base.Channel.sendMailAsync(mailTo, subject, body, htmlMail);
        }
        
        public System.Threading.Tasks.Task<string> sendMailCCorBCCAsync(string mailTo, string mailCC, string mailBCC, string subject, string body, bool htmlMail)
        {
            return base.Channel.sendMailCCorBCCAsync(mailTo, mailCC, mailBCC, subject, body, htmlMail);
        }
        
        public System.Threading.Tasks.Task<string> sendMailWithPersonalFromAsync(string personalMailFrom, string mailTo, string mailCC, string mailBCC, string subject, string body, bool htmlMail)
        {
            return base.Channel.sendMailWithPersonalFromAsync(personalMailFrom, mailTo, mailCC, mailBCC, subject, body, htmlMail);
        }
        
        public System.Threading.Tasks.Task<string> sendMailCCorBCCWithFromNameAsync(string FromName, string mailTo, string mailCC, string mailBCC, string subject, string body, bool htmlMail)
        {
            return base.Channel.sendMailCCorBCCWithFromNameAsync(FromName, mailTo, mailCC, mailBCC, subject, body, htmlMail);
        }
        
        public System.Threading.Tasks.Task<string> sendMailCCorBCCWithFromNameEmailAsync(string FromName, string FromEmail, string mailTo, string mailCC, string mailBCC, string subject, string body, bool htmlMail)
        {
            return base.Channel.sendMailCCorBCCWithFromNameEmailAsync(FromName, FromEmail, mailTo, mailCC, mailBCC, subject, body, htmlMail);
        }
        
        public System.Threading.Tasks.Task<string> sendMailAttachmentCollectionAsync(string mailTo, string subject, string body, object[] attachList, object[] attachListType, bool htmlMail)
        {
            return base.Channel.sendMailAttachmentCollectionAsync(mailTo, subject, body, attachList, attachListType, htmlMail);
        }
        
        public System.Threading.Tasks.Task<string> sendMailAttachmentCollectionWithFromNameAsync(string mailTo, string FromName, string subject, string body, object[] attachList, object[] attachListType, bool htmlMail)
        {
            return base.Channel.sendMailAttachmentCollectionWithFromNameAsync(mailTo, FromName, subject, body, attachList, attachListType, htmlMail);
        }
        
        public System.Threading.Tasks.Task<string> sendMailAttachmentCollectionBase64Async(string mailTo, string subject, string body, object[] attachList, object[] attachListType, bool htmlMail)
        {
            return base.Channel.sendMailAttachmentCollectionBase64Async(mailTo, subject, body, attachList, attachListType, htmlMail);
        }
        
        public System.Threading.Tasks.Task<string> sendMailAttachmentCollectionBase64WithFromNameAsync(string mailTo, string FromName, string subject, string body, object[] attachList, object[] attachListType, bool htmlMail)
        {
            return base.Channel.sendMailAttachmentCollectionBase64WithFromNameAsync(mailTo, FromName, subject, body, attachList, attachListType, htmlMail);
        }
        
        public System.Threading.Tasks.Task<string> sendMailWithReplyToAsync(string mailTo, string subject, string body, bool htmlMail, string replyTo)
        {
            return base.Channel.sendMailWithReplyToAsync(mailTo, subject, body, htmlMail, replyTo);
        }
        
        public System.Threading.Tasks.Task<string> sendMailWithFromNameAsync(string mailTo, string subject, string body, bool htmlMail, string FromName)
        {
            return base.Channel.sendMailWithFromNameAsync(mailTo, subject, body, htmlMail, FromName);
        }
        
        public System.Threading.Tasks.Task<string> sendMailWithFromNameAndReplyToAsync(string mailTo, string subject, string body, bool htmlMail, string FromName, string replyTo)
        {
            return base.Channel.sendMailWithFromNameAndReplyToAsync(mailTo, subject, body, htmlMail, FromName, replyTo);
        }
        
        public System.Threading.Tasks.Task<string> sendMailBlockAsync(string mailTo, string subject, string body, bool htmlMail, long numberOfMails, long numberOfThisMail)
        {
            return base.Channel.sendMailBlockAsync(mailTo, subject, body, htmlMail, numberOfMails, numberOfThisMail);
        }
        
        public System.Threading.Tasks.Task<string> sendMailWithFromNameEmailAsync(string mailTo, string subject, string body, bool htmlMail, string FromName, string FromMail)
        {
            return base.Channel.sendMailWithFromNameEmailAsync(mailTo, subject, body, htmlMail, FromName, FromMail);
        }
        
        public System.Threading.Tasks.Task<string> sendMailAttachmentCollectionWithFromNameEmailAsync(string mailTo, string FromName, string FromMail, string subject, string body, object[] attachList, object[] attachListType, bool htmlMail)
        {
            return base.Channel.sendMailAttachmentCollectionWithFromNameEmailAsync(mailTo, FromName, FromMail, subject, body, attachList, attachListType, htmlMail);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.emailSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.emailSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.emailSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://bayer-utilsdev.bss.bayer.br.intranet/email.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.emailSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://bayer-utilsdev.bss.bayer.br.intranet/email.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            emailSoap,
            
            emailSoap12,
        }
    }
}
